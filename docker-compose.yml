version: "2.2"

services:
  es-node01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}
    container_name: es-node01
    environment:
      - node.name=es-node01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es-node01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es-node01/es-node01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es-node01/es-node01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es-node01/es-node01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es-node01/es-node01.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
      - ./certs:$CERTS_DIR
    ports:
      - 9200:9200
    networks:
      - elastic
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null;
        if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kib01:
    image: docker.elastic.co/kibana/kibana:${VERSION}
    container_name: kib01
    depends_on: { "es-node01": { "condition": "service_healthy" } }
    ports:
      - 5601:5601
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: https://es-node01:9200
      ELASTICSEARCH_HOSTS: https://es-node01:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: $KIBANA_SYSTEM_PASSWORD
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY: $CERTS_DIR/kib01/kib01.key
      SERVER_SSL_CERTIFICATE: $CERTS_DIR/kib01/kib01.crt
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: 5594836763c4a77f60640da8afae5cd5
      XPACK_SECURITY_ENCRYPTIONKEY: f687f06daa9377fb33b808321197eed0
    volumes:
      - ./certs:$CERTS_DIR
    networks:
      - elastic

  fleet-server01:
    image: docker.elastic.co/beats/elastic-agent:${VERSION}
    container_name: fleet-server01
    environment:
      FLEET_SERVER_ENABLE: "true"
      # FLEET_SERVER_INSECURE_HTTP: "false"
      FLEET_SERVER_SERVICE_TOKEN: $FLEET_TOKEN
      FLEET_SERVER_CERT: $CERTS_DIR/kib01/fleet-server01.crt
      FLEET_SERVER_CERT_KEY: $CERTS_DIR/kib01/fleet-server01.key
      # FLEET_URL: REPLACE_ME
      FLEET_SERVER_ELASTICSEARCH_HOST: https://es-node01:9200
      # FLEET_INSECURE=1
      FLEET_SERVER_ELASTICSEARCH_CA: $CERTS_DIR/ca/ca.crt
      # KIBANA_FLEET_CA: $CERTS_DIR/ca/ca.crt
      # FLEET_CA: $CERTS_DIR/ca/ca.crt
      # ELASTICSEARCH_CA: $CERTS_DIR/ca/ca.crt
      # KIBANA_CA: $CERTS_DIR/ca/ca.crt
    pots:
      - "8220:8220"
    volumes:
      - ./certs:$CERTS_DIR
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 5

volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  elastic:
    driver: bridge
